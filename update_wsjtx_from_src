#!/bin/bash
#
# Script to update WSJT-X on Raspberry Pi or Ubuntu
#
# Copyright 2020, Dave Slotter, W3DJS
#

DOWNLOAD_VERSION=2.3.0-rc3
DIRECTORY=${HOME}/hamradio
PROGRAM=wsjtx
export CXXFLAGS="-O2 -march=native -mtune=native"
export CFLAGS="-O2 -march=native -mtune=native"
export MAKEFLAGS="-j `grep CPU /proc/cpuinfo | wc -l`"

if [ ! -x /usr/bin/wget ]; then
  echo "wget is not installed; automatically installing wget..."
  sudo apt -y install wget
fi

if [ ! -d "${DIRECTORY}" ]; then
  echo "${DIRECTORY} does not exist; creating it..."
  mkdir -p "${DIRECTORY}"
fi

# Ensure required components are present
echo -e "\nDownloading any missing required packages..."
linux_distribution=`lsb_release -si`
linux_version=`lsb_release -sr | awk -F \. {'print $1'}`
if [ $linux_distribution == 'Ubuntu' ]; then
  if [ $linux_version -lt 20 ]; then
  {
      echo "Ubuntu pre-version 20 detected..."
      # Ubuntu earlier than 20.04:
      sudo apt -y install build-essential cmake gfortran libqt5multimedia5 libqt5multimedia5-plugins libqt5serialport5 libqt5serialport5-dev libgfortran3 libboost-all-dev libfftw3-dev
  }
  else
  {
      echo "Ubuntu version 20 or later detected..."
      # Ubuntu earlier than 20.04:
      # Ubuntu 20.04:
      sudo apt -y install build-essential cmake gfortran qtmultimedia5-dev libqt5multimedia5 libqt5multimedia5-plugins libqt5serialport5 libqt5serialport5-dev qttools5-dev libgfortran4 libboost-all-dev libfftw3-dev
  }
  fi
fi

# Determine WSJT-X application version
wsjtx_app_version=`which wsjtx_app_version`
if [ $wsjtx_app_version != "" ]; then
  INSTALLED_VERSION=`$wsjtx_app_version -v | awk '{print $2}'`
else
  INSTALLED_VERSION=`dpkg -l ${PROGRAM} | grep ${PROGRAM} | awk '{print $3}'`
fi

echo "Installed ${PROGRAM} version is: $INSTALLED_VERSION"

if [ "$DOWNLOAD_VERSION" == "" ]; then
  DOWNLOAD_VERSION="0.0.0"
fi

if [ "$INSTALLED_VERSION" == "$DOWNLOAD_VERSION" ]; then
  echo "Installed ${PROGRAM} version is CURRENT."
  exit
fi

echo -e "\nUpdating $PROGRAM..."

if ! cd $DIRECTORY; then
  echo "cd ${DIRECTORY} failed."
  exit
fi

if ! wget --no-check-certificate https://physics.princeton.edu/pulsar/K1JT/${PROGRAM}-${DOWNLOAD_VERSION}.tgz; then
  echo "Download of ${PROGRAM}_${DOWNLOAD_VERSION}.tgz failed."
  exit
fi

if ! tar -zxf ${PROGRAM}-${DOWNLOAD_VERSION}.tgz; then
  echo "Decompressing archive ${PROGRAM}-${DOWNLOAD_VERSION}.tgz failed."
  exit
fi

if ! cd ${PROGRAM}-${DOWNLOAD_VERSION}/src; then
  echo "cd ${PROGRAM}-${DOWNLOAD_VERSION}/src failed."
  exit
fi

if ! tar -zxf ${PROGRAM}.tgz; then
  echo "Decompressing archive ${PROGRAM}.tgz failed."
  exit
fi

if ! cd ${PROGRAM}; then
  echo "cd ${PROGRAM} failed."
  exit
fi

if ! mkdir build; then
  echo "mkdir build failed."
  exit
fi

if ! cd build; then
  echo "cd build failed."
  exit
fi

if ! cmake -DWSJT_SKIP_MANPAGES=ON -DWSJT_GENERATE_DOCS=OFF ..; then
  echo "Generate cmake makefiles failed."
  exit
fi

if ! cmake --build . ; then
  echo "cmake build failed."
  exit
fi

if ! sudo cmake --build . --target install ; then
  echo "cmake install failed."
  exit
fi

if ! sudo sed -i 's/^Categories=AudioVideo;Audio;HamRadio;/Categories=HamRadio Weak Signal/g' /usr/local/share/applications/wsjtx.desktop; then
  echo "sed failed to fix wsjtx.desktop."
  exit
fi

if ! sudo sed -i 's/^Categories=AudioVideo;Audio;HamRadio;/Categories=HamRadio Weak Signal/g' /usr/local/share/applications/message_aggregator.desktop; then
  echo "sed failed to fix .message_aggregator.desktop."
  exit
fi

if ! cd $DIRECTORY; then
  echo "cd ${DIRECTORY} failed."
  exit
fi

if ! rm -fr ${PROGRAM}-${DOWNLOAD_VERSION}; then
  echo "Removing source directory for ${PROGRAM}-${DOWNLOAD_VERSION} failed."
  exit
fi

if ! rm ${PROGRAM}-${DOWNLOAD_VERSION}.tgz; then
  echo "Removing download archive for ${PROGRAM}-${DOWNLOAD_VERSION}.tgz failed."
  exit
fi

echo "Upgrade of ${PROGRAM}_${DOWNLOAD_VERSION} completed successfully."

